{"tags":[{"name":"Git","permalink":"http://gyyzyp.com/tags/Git/","url":"/async/tags/Git.json","count":1}],"categories":[{"name":"总结","permalink":"http://gyyzyp.com/categories/总结/","url":"/async/categories/总结.json","count":1}],"url":"/async/posts/2016/12/03/git常用命令总结.json","date":1480752030000,"path":{"year":2016,"month":12,"day":3,"name":"git常用命令总结"},"title":"git常用命令总结","permalink":"http://gyyzyp.com/2016/12/03/git常用命令总结/","content":"<p>最近在开始写小论文，空暇时间想做些总结性的东东，那么就先写点关于git的常用命令的总结吧，方便自己也方便大家…..<br>PS: 虽然好像没人点进来瞅瞅过，没有SEO是硬伤…..<br> <a id=\"more\"></a></p>\n<p>首先对Git仓库操作涉及的三个不同区域进行说明：<br>一个Git仓库下有三个不同的区域：<br><em>Workspace(工作区)， Stage或者Index(暂存区)、Respository（仓库区）</em><br>我们针对项目代码的更改操作都是在<strong>工作区</strong>进行的，通过执行<code>git add *</code>命令就把在<strong>工作区</strong>的改动提交到了<strong>暂存区</strong>，通过执行<code>git commit -m &#39;info about this commit&#39;</code>就把已经存放在<strong>暂存区</strong>的改动给提交到了当前分支的<strong>仓库区</strong></p>\n<h2 id=\"1-提交文件\"><a href=\"#1-提交文件\" class=\"headerlink\" title=\"1.提交文件\"></a>1.提交文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add * #添加当前目录中所有文件到暂存区</div><div class=\"line\">$ git commit -m [message] # 提交暂存区到仓库区</div><div class=\"line\">$ git remote add origin git@github.com:abcd/tmp.git  # 增加远程仓库到本地并明命名为origin</div><div class=\"line\">$ git push -u origin master # 推送此次修改，首次推送需要加上-u,之后推送就可以直接git push  origin master,origin是远程Git名字，这个可以自己定义，master是默认的分支，如果不在master分支提交需要写清楚分支名称</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add [file1] [file2] ... # 添加指定文件到暂存区</div><div class=\"line\">$ git add [dir] # 添加指定目录到暂存区，包括子目录</div><div class=\"line\">$ git add * # 添加当前目录的所有文件到暂存区</div><div class=\"line\"></div><div class=\"line\">$ git add -p # 添加每个变化前，都会要求确认 对于同一个文件的多处变化，可以实现分次提交</div><div class=\"line\"></div><div class=\"line\">$ git rm [file1] [file2] ...  # 感觉这条命令还是比较复杂的 下面详细说下</div><div class=\"line\"># 其作用：删除已经用`git commit`提交到仓库区中的文件并停止对其的跟踪，附带行为：</div><div class=\"line\"># 1.如果工作区对应的文件和当前已经提交到仓库区的文件保持一致 就直接也将工作区中的文件删除类似于`/bin/rm file1` 同时将此次删除操作放入暂存区</div><div class=\"line\">#如: 已经通过`git commit`将 文件改动后的file1文件提交到了仓库中，并且工作区此时也没有对其进行改动</div><div class=\"line\">#那么，通过`git rm file1` 就将仓库中的file1文件和本地工作区的文件都删除了，并且将删除操作放入了暂存区， 也就是说此时工作区的file1文件也没了（当前可以通过`git checkout` 命令进行恢复）</div><div class=\"line\">#2. 如果在工作区中对file1文件又进行了改动 导致（和仓库区不一致），此时有两种选择</div><div class=\"line\">#2.1 使用`-f` 选项 这会强制将暂存区还有工作区的file1文件删除 并将删除操作放入暂存区</div><div class=\"line\">#2.2 使用`--cached` 选项，这会删除仓库区中的文件，但会保留工作区的文件</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ git mv [file-original] [file-renamed] # 改名文件，并且将这个改名放入暂存区</div><div class=\"line\">$ git commit -m [message] # 提交暂存区到仓库区</div><div class=\"line\">$ git commit [file1] [file2] ... -m [message] # 提交暂存区的指定文件到仓库区</div><div class=\"line\">$ git commit -a # 提交工作区自上次commit之后的所有的变化，直接到仓库区</div><div class=\"line\">$ git commit -v # 提交时 在提交说明模板里显示所有diff信息</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 这个命令用的比较多，主要用于重写commit message 使用一次新的commit，替代上一次提交</div><div class=\"line\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息 # #但是如果你已经push过了，那么其历史最后一次，通过这个参数也不能修改了。</div><div class=\"line\">$ git commit --amend -m [message]</div><div class=\"line\"></div><div class=\"line\">$ git commit --amend [file1] [file2] ... # 重做上一次commit，并包括指定文件的新变化</div><div class=\"line\"></div><div class=\"line\">$ git push origin master# 提交更改到远程仓库</div><div class=\"line\">$ git pull origin master# 拉取远程更改到本地仓库默认自动合并</div></pre></td></tr></table></figure>\n<p><strong>未完，待续…..</strong></p>\n"}